root: rline* ;

rline: proc | def_var | def_def ;

def_var: "var" type name expr ;
def_def: "def" type name ;

getv: name geti? ;

geti: lparb int rparb ;

proc: "fn" name name type* comma name* semi
	line* semi ;

type: "<>"? name ;

line: "ret" expr comma
	| "set" getv expr comma
	| "label" name comma
	| "jump" name comma
	| expr comma
	;

expr: int | char | string | name | castp | calle ;

castp: "cast" expr type ;

calle: "call" name expr* comma ;

terminals

char: /\'(\w|\\(\d{3}|x[A-Za-z0-9]{2}|u|[A-Za-z0-9]{4}|\"|\\\'))\'/;
string: /"[^\n"\\]*(?:\\.[^\n"\\]*)*"/;
int: /-?(0[Xx][A-Za-z0-9][A-Za-z0-9_]*|\d+|1[01]*[Bb]|0[Bb]|0[xX][0-9a-fA-F]+)/;
name: /[A-Za-z_]\w*/;
ellipse: '...';
plus: '+' ;
minus: '-' ;
star: '*' ;
slash: '/' ;
colon: ':' ;
semi: ';' ;
and: '&' ;
expl: '!' ;
at: '@' ;
bux: '$' ;
percent: '%' ;
flex: '^' ;
equal: '=' ;
apos: '`' ;
tilde: '~' ;
bslash: '\\' ;
vbar: '|' ;
dot: '.' ;
comma: ',' ;
lparn: '(' ;
rparn: ')' ;
lparf: '{' ;
rparf: '}' ;
lparb: '[' ;
rparb: ']' ;
lpara: '<' ;
rpara: '>' ;
arrow: '->' ;

