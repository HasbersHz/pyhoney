root: rline*;

rline: def_format
     | def_import
     | def_func
     | def_var
     | def_def
     | comment
     ;

def_format: "format" name;
def_import: "import" string;
def_func: "fn" name lparn (def_def (comma def_def)*)? rparn (arrow type)? lparf line* rparf;
def_def: name colon type;
def_var: def_def equal expr;

type: name (lparb int? rparb)?;

line: ret | liv | def_var | for_ever | for_each | expr | comment;

for_ever: "for" lparf line* rparf;
for_each: "for" def_def "in" range lparf line* rparf;
for_while: "for" expr lparf line* rparf;
for_clike: "for" def_var semi expr semi line lparf line* rparf;

liv: "leave";

call: name lparn (expr (comma expr)*)? rparn;

cast: expr "as" type;

ret: "return" expr;

assign: getv equal expr;

getv: name geti?;

geti: lparb expr rparb;

range: expr dotdot expr;

expr: range | int | char | string | name | ellipse | call | cast | assign
    | expr ( plus
           | minus
           | star
           | slash
           | and
           | at
           | percent
           | flex
           | vbar
           | shl
           | shr
           | lpara
           | rpara
           ) expr
     | ( minus
       | tilde
       | expl
       | bux
       | plusplus
       | minusminus
       ) expr
     | expr ( tilde
            | plusplus
            | minusminus
            );

terminals

comment: /\#[^#]*\#/;
char: /\'(\w|\\(\d{3}|x[A-Za-z0-9]{2}|u|[A-Za-z0-9]{4}|\"|\\\'))\'/;
string: /"[^\n"\\]*(?:\\.[^\n"\\]*)*"/;
int: /[+-]?(0[Xx][A-Za-z0-9][A-Za-z0-9_]*|\d+|1[01]*[Bb]|0[Bb]|0[xX][0-9a-fA-F]+)/;
name: /[A-Za-z_]\w*/;
dotdot: '..';
ellipse: '...';
plusplus: '++';
plus: '+' ;
minusminus: '--';
minus: '-' ;
star: '*' ;
slash: '/' ;
coloncolon: '::';
colon: ':' ;
semi: ';' ;
and: '&' ;
expl: '!' ;
at: '@' ;
bux: '$' ;
percent: '%' ;
flex: '^' ;
equal: '=' ;
apos: '`' ;
tilde: '~' ;
bslash: '\\' ;
vbar: '|' ;
shl: '<<';
shr: '>>';
dot: '.' ;
comma: ',' ;
lparn: '(' ;
rparn: ')' ;
lparf: '{' ;
rparf: '}' ;
lparb: '[' ;
rparb: ']' ;
lpara: '<' ;
rpara: '>' ;
arrow: '->' ;
